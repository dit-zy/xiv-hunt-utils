using System.Text;
using DitzyExtensions;

namespace XivHuntUtils.Tests.Generators;

public static class GenUtils {
	public const string MockExcelSheetAttributeFqn = "XivHuntUtils.Tests.Generators.MockExcelSheetAttribute";
	public const string GenNamespace = "XivHuntUtils.Tests.Generators";

	public const string MockExcelSheetAttributeSource = $$"""
		// <autogenerated/>
		using System;

		namespace {{GenNamespace}};

		[AttributeUsage(AttributeTargets.Class, AllowMultiple=true, Inherited=false)]
		public class MockExcelSheetAttribute : System.Attribute {
		
			public Type SheetType { get; set; }
			public string TargetNamespace { get; set; }
			
			public MockExcelSheetAttribute(Type sheetType) {
				SheetType = sheetType;
				TargetNamespace = default;
			}
		}
		""";

	public const string StaticInstanceFieldSource = $$"""
		// <autogenerated/>
		using CSharpFunctionalExtensions;
		using DitzyExtensions.Functional;

		namespace {{GenNamespace}};

		public class StaticInstanceField<T> {
			private readonly IDictionary<int, T> _fieldValues = new Dictionary<int, T>();
		
			public Maybe<T> Get(object instance) => _fieldValues.MaybeGet(instance.GetHashCode());
			
			public T GetOrDefault(object instance, T defaultValue = default) {
				var existingValue = Get(instance);
				var value = existingValue.GetValueOrDefault(defaultValue);
				if (existingValue.HasNoValue) Set(instance, value);
				return value;
			}
			
			public void Set(object instance, T value) => _fieldValues[instance.GetHashCode()] = value;
		}
		""";

	internal static string GetExtensionClassText(ExcelSheetPatchData data, string className) {
		var targetNamespace = data.TargetNamespace;
		if (targetNamespace == null || targetNamespace.Length == 0) {
			targetNamespace = data.DecoratedClassNamespace;
		}

		var sb = new StringBuilder();
		sb
			.Append(
				$$"""
				// <autogenerated/>
				using HarmonyLib;
				using System.Collections;
				using System.Reflection;

				using {{GenNamespace}};

				using Lumina.Excel;
				using {{data.SheetTypeNamespace}};

				namespace {{targetNamespace}};

				public static class Mock{{data.SheetTypeName}} {
					public static {{data.SheetTypeName}} Create(uint rowId) =>
						new {{data.SheetTypeName}}(null, 0, rowId);
				}

				[HarmonyPatch(typeof({{data.SheetTypeName}}))]
				public static class {{className}} {

				"""
			)
			.AppendLine()
			.AppendLine("	// INSTANCE FIELD CONTAINERS")
			.AppendLine(
				data.Properties.Values.Select(
						p =>
							$"	private static readonly StaticInstanceField<{p.type}> _values{p.name} = new StaticInstanceField<{p.type}>();"
					)
					.Join("\n")
			)
			.AppendLine()
			.AppendLine("	// PROPERTY GETTERS")
			.AppendLine(
				data.Properties.Values.Select(
						p =>
							$"	public static {p.type} Get{p.name}(this {data.SheetTypeName} o) => _values{p.name}.GetOrDefault(o.RowId);"
					)
					.Join("\n")
			)
			.AppendLine()
			.AppendLine("	// PROPERTY SETTERS")
			.AppendLine(
				data.Properties.Values.Select(
						p =>
							$$"""
								public static {{data.SheetTypeName}} Set{{p.name}}(this {{data.SheetTypeName}} o, {{p.type}} value) {
									_values{{p.name}}.Set(o.RowId, value);
									return o;
								}
							"""
					)
					.Join("\n")
			)
			.AppendLine()
			.AppendLine("	// ROWREF ID SETTERS")
			.AppendLine(
				data.RowRefs.Values.Select(
						p =>
							$$"""
								public static {{data.SheetTypeName}} Set{{p.name}}RowId(this {{data.SheetTypeName}} o, uint rowId) {
									_values{{p.name}}.Set(o.RowId, new {{p.type}}(null, rowId, null));
									return o;
								}
							"""
					)
					.Join("\n")
			)
			.AppendLine()
			.AppendLine("	// PROPERTY GETTER PATCHES")
			.AppendLine(
				data.Properties.Values.Select(
						p =>
							$$"""
								[HarmonyPrefix]
								[HarmonyPatch(nameof({{data.SheetTypeName}}.{{p.name}}), MethodType.Getter)]
								public static bool GetMock{{p.name}}({{data.SheetTypeName}} __instance, ref {{p.type}} __result) {
									__result = {{className}}.Get{{p.name}}(__instance);
									return false;
								}
							"""
					)
					.Join("\n\n")
			)
			.AppendLine("}")
			.AppendLine()
			.AppendLine(
				$$"""
				[HarmonyPatch]
				public static class {{data.SheetTypeName}}ExcelSheetExtensions {
					private static readonly StaticInstanceField<List<{{data.SheetTypeName}}>> RegisteredRows = new();
					
					public static List<{{data.SheetTypeName}}> GetMockRows(this ExcelSheet<{{data.SheetTypeName}}> sheet) {
						return RegisteredRows.GetOrDefault(sheet, new List<{{data.SheetTypeName}}>());
					}
					
					public static void AddMockRows(
						this ExcelSheet<{{data.SheetTypeName}}> sheet,
						params {{data.SheetTypeName}}[] rows
					) {
						GetMockRows(sheet).AddRange(rows);
					}
				
					[HarmonyPrefix]
					public static bool GetMockEnumerator(
						ExcelSheet<{{data.SheetTypeName}}> __instance,
						ref IEnumerator __result
					) {
						IEnumerable<{{data.SheetTypeName}}> rows = GetMockRows(__instance);
						__result = (IEnumerator)rows.GetEnumerator();
						return false;
					}
				
					[HarmonyTargetMethods]
					public static IEnumerable<MethodBase> EnumeratorMethods() {
						return [
							InterfaceImpl<ExcelSheet<{{data.SheetTypeName}}>, IEnumerable>(nameof(IEnumerable.GetEnumerator)),
							InterfaceImpl<ExcelSheet<{{data.SheetTypeName}}>, IEnumerable<{{data.SheetTypeName}}>>(
								nameof(IEnumerable<{{data.SheetTypeName}}>.GetEnumerator)
							),
						];
					}
				
					private static MethodInfo InterfaceImpl<Impl, Interface>(string methodName) {
						var map = typeof(Impl).GetInterfaceMap(typeof(Interface));
						return map
							.InterfaceMethods
							.Select((method, i) => (method, i))
							.Where(m => m.method.Name == methodName)
							.Select(m => map.TargetMethods[m.i])
							.First();
					}
				}
				"""
			);

		return sb.ToString();
	}
}
