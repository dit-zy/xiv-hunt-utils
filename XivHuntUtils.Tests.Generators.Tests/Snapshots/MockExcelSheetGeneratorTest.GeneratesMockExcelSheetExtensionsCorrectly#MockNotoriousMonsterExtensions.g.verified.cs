//HintName: MockNotoriousMonsterExtensions.g.cs
// <autogenerated/>
using HarmonyLib;
using System.Collections;
using System.Reflection;

using XivHuntUtils.Tests.Generators;

using Lumina.Excel;
using Lumina.Excel.Sheets;

namespace GenTests.Tests;

public static class MockNotoriousMonster {
	public static NotoriousMonster Create(uint rowId) =>
		new NotoriousMonster(null, 0, rowId);
}

[HarmonyPatch(typeof(NotoriousMonster))]
public static class MockNotoriousMonsterExtensions {

	// INSTANCE FIELD CONTAINERS
	private static readonly StaticInstanceField<Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcName>> _valuesBNpcName = new StaticInstanceField<Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcName>>();
	private static readonly StaticInstanceField<Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcBase>> _valuesBNpcBase = new StaticInstanceField<Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcBase>>();
	private static readonly StaticInstanceField<ushort> _valuesUnknown0 = new StaticInstanceField<ushort>();
	private static readonly StaticInstanceField<byte> _valuesRank = new StaticInstanceField<byte>();

	// PROPERTY GETTERS
	public static Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcName> GetBNpcName(this NotoriousMonster o) => _valuesBNpcName.GetOrDefault(o.RowId);
	public static Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcBase> GetBNpcBase(this NotoriousMonster o) => _valuesBNpcBase.GetOrDefault(o.RowId);
	public static ushort GetUnknown0(this NotoriousMonster o) => _valuesUnknown0.GetOrDefault(o.RowId);
	public static byte GetRank(this NotoriousMonster o) => _valuesRank.GetOrDefault(o.RowId);

	// PROPERTY SETTERS
	public static NotoriousMonster SetBNpcName(this NotoriousMonster o, Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcName> value) {
		_valuesBNpcName.Set(o.RowId, value);
		return o;
	}
	public static NotoriousMonster SetBNpcBase(this NotoriousMonster o, Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcBase> value) {
		_valuesBNpcBase.Set(o.RowId, value);
		return o;
	}
	public static NotoriousMonster SetUnknown0(this NotoriousMonster o, ushort value) {
		_valuesUnknown0.Set(o.RowId, value);
		return o;
	}
	public static NotoriousMonster SetRank(this NotoriousMonster o, byte value) {
		_valuesRank.Set(o.RowId, value);
		return o;
	}

	// ROWREF ID SETTERS
	public static NotoriousMonster SetBNpcNameRowId(this NotoriousMonster o, uint rowId) {
		_valuesBNpcName.Set(o.RowId, new Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcName>(null, rowId, null));
		return o;
	}
	public static NotoriousMonster SetBNpcBaseRowId(this NotoriousMonster o, uint rowId) {
		_valuesBNpcBase.Set(o.RowId, new Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcBase>(null, rowId, null));
		return o;
	}

	// PROPERTY GETTER PATCHES
	[HarmonyPrefix]
	[HarmonyPatch(nameof(NotoriousMonster.BNpcName), MethodType.Getter)]
	public static bool GetMockBNpcName(NotoriousMonster __instance, ref Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcName> __result) {
		__result = MockNotoriousMonsterExtensions.GetBNpcName(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(NotoriousMonster.BNpcBase), MethodType.Getter)]
	public static bool GetMockBNpcBase(NotoriousMonster __instance, ref Lumina.Excel.RowRef<Lumina.Excel.Sheets.BNpcBase> __result) {
		__result = MockNotoriousMonsterExtensions.GetBNpcBase(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(NotoriousMonster.Unknown0), MethodType.Getter)]
	public static bool GetMockUnknown0(NotoriousMonster __instance, ref ushort __result) {
		__result = MockNotoriousMonsterExtensions.GetUnknown0(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(NotoriousMonster.Rank), MethodType.Getter)]
	public static bool GetMockRank(NotoriousMonster __instance, ref byte __result) {
		__result = MockNotoriousMonsterExtensions.GetRank(__instance);
		return false;
	}
}

[HarmonyPatch]
public static class NotoriousMonsterExcelSheetExtensions {
	private static readonly StaticInstanceField<List<NotoriousMonster>> RegisteredRows = new();
	
	public static List<NotoriousMonster> GetMockRows(this ExcelSheet<NotoriousMonster> sheet) {
		return RegisteredRows.GetOrDefault(sheet, new List<NotoriousMonster>());
	}
	
	public static void AddMockRows(
		this ExcelSheet<NotoriousMonster> sheet,
		params NotoriousMonster[] rows
	) {
		GetMockRows(sheet).AddRange(rows);
	}

	[HarmonyPrefix]
	public static bool GetMockEnumerator(
		ExcelSheet<NotoriousMonster> __instance,
		ref IEnumerator __result
	) {
		IEnumerable<NotoriousMonster> rows = GetMockRows(__instance);
		__result = (IEnumerator)rows.GetEnumerator();
		return false;
	}

	[HarmonyTargetMethods]
	public static IEnumerable<MethodBase> EnumeratorMethods() {
		return [
			InterfaceImpl<ExcelSheet<NotoriousMonster>, IEnumerable>(nameof(IEnumerable.GetEnumerator)),
			InterfaceImpl<ExcelSheet<NotoriousMonster>, IEnumerable<NotoriousMonster>>(
				nameof(IEnumerable<NotoriousMonster>.GetEnumerator)
			),
		];
	}

	private static MethodInfo InterfaceImpl<Impl, Interface>(string methodName) {
		var map = typeof(Impl).GetInterfaceMap(typeof(Interface));
		return map
			.InterfaceMethods
			.Select((method, i) => (method, i))
			.Where(m => m.method.Name == methodName)
			.Select(m => map.TargetMethods[m.i])
			.First();
	}
}
