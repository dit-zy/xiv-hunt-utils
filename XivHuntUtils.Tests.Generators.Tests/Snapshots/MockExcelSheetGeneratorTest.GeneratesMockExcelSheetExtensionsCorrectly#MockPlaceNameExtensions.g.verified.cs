//HintName: MockPlaceNameExtensions.g.cs
// <autogenerated/>
using HarmonyLib;
using System.Collections;
using System.Reflection;

using XivHuntUtils.Tests.Generators;

using Lumina.Excel;
using Lumina.Excel.Sheets;

namespace GenTests.Tests;

public static class MockPlaceName {
	public static PlaceName Create(uint rowId) =>
		new PlaceName(null, 0, rowId);
}

[HarmonyPatch(typeof(PlaceName))]
public static class MockPlaceNameExtensions {

	// INSTANCE FIELD CONTAINERS
	private static readonly StaticInstanceField<Lumina.Text.ReadOnly.ReadOnlySeString> _valuesName = new StaticInstanceField<Lumina.Text.ReadOnly.ReadOnlySeString>();
	private static readonly StaticInstanceField<Lumina.Text.ReadOnly.ReadOnlySeString> _valuesNameNoArticle = new StaticInstanceField<Lumina.Text.ReadOnly.ReadOnlySeString>();
	private static readonly StaticInstanceField<Lumina.Text.ReadOnly.ReadOnlySeString> _valuesUnknown0 = new StaticInstanceField<Lumina.Text.ReadOnly.ReadOnlySeString>();
	private static readonly StaticInstanceField<sbyte> _valuesUnknown1 = new StaticInstanceField<sbyte>();
	private static readonly StaticInstanceField<sbyte> _valuesUnknown2 = new StaticInstanceField<sbyte>();
	private static readonly StaticInstanceField<sbyte> _valuesUnknown3 = new StaticInstanceField<sbyte>();
	private static readonly StaticInstanceField<sbyte> _valuesUnknown4 = new StaticInstanceField<sbyte>();
	private static readonly StaticInstanceField<sbyte> _valuesUnknown5 = new StaticInstanceField<sbyte>();
	private static readonly StaticInstanceField<sbyte> _valuesUnknown6 = new StaticInstanceField<sbyte>();
	private static readonly StaticInstanceField<ushort> _valuesUnknown7 = new StaticInstanceField<ushort>();
	private static readonly StaticInstanceField<byte> _valuesUnknown8 = new StaticInstanceField<byte>();
	private static readonly StaticInstanceField<byte> _valuesUnknown9 = new StaticInstanceField<byte>();

	// PROPERTY GETTERS
	public static Lumina.Text.ReadOnly.ReadOnlySeString GetName(this PlaceName o) => _valuesName.GetOrDefault(o.RowId);
	public static Lumina.Text.ReadOnly.ReadOnlySeString GetNameNoArticle(this PlaceName o) => _valuesNameNoArticle.GetOrDefault(o.RowId);
	public static Lumina.Text.ReadOnly.ReadOnlySeString GetUnknown0(this PlaceName o) => _valuesUnknown0.GetOrDefault(o.RowId);
	public static sbyte GetUnknown1(this PlaceName o) => _valuesUnknown1.GetOrDefault(o.RowId);
	public static sbyte GetUnknown2(this PlaceName o) => _valuesUnknown2.GetOrDefault(o.RowId);
	public static sbyte GetUnknown3(this PlaceName o) => _valuesUnknown3.GetOrDefault(o.RowId);
	public static sbyte GetUnknown4(this PlaceName o) => _valuesUnknown4.GetOrDefault(o.RowId);
	public static sbyte GetUnknown5(this PlaceName o) => _valuesUnknown5.GetOrDefault(o.RowId);
	public static sbyte GetUnknown6(this PlaceName o) => _valuesUnknown6.GetOrDefault(o.RowId);
	public static ushort GetUnknown7(this PlaceName o) => _valuesUnknown7.GetOrDefault(o.RowId);
	public static byte GetUnknown8(this PlaceName o) => _valuesUnknown8.GetOrDefault(o.RowId);
	public static byte GetUnknown9(this PlaceName o) => _valuesUnknown9.GetOrDefault(o.RowId);

	// PROPERTY SETTERS
	public static PlaceName SetName(this PlaceName o, Lumina.Text.ReadOnly.ReadOnlySeString value) {
		_valuesName.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetNameNoArticle(this PlaceName o, Lumina.Text.ReadOnly.ReadOnlySeString value) {
		_valuesNameNoArticle.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown0(this PlaceName o, Lumina.Text.ReadOnly.ReadOnlySeString value) {
		_valuesUnknown0.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown1(this PlaceName o, sbyte value) {
		_valuesUnknown1.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown2(this PlaceName o, sbyte value) {
		_valuesUnknown2.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown3(this PlaceName o, sbyte value) {
		_valuesUnknown3.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown4(this PlaceName o, sbyte value) {
		_valuesUnknown4.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown5(this PlaceName o, sbyte value) {
		_valuesUnknown5.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown6(this PlaceName o, sbyte value) {
		_valuesUnknown6.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown7(this PlaceName o, ushort value) {
		_valuesUnknown7.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown8(this PlaceName o, byte value) {
		_valuesUnknown8.Set(o.RowId, value);
		return o;
	}
	public static PlaceName SetUnknown9(this PlaceName o, byte value) {
		_valuesUnknown9.Set(o.RowId, value);
		return o;
	}

	// ROWREF ID SETTERS


	// PROPERTY GETTER PATCHES
	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Name), MethodType.Getter)]
	public static bool GetMockName(PlaceName __instance, ref Lumina.Text.ReadOnly.ReadOnlySeString __result) {
		__result = MockPlaceNameExtensions.GetName(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.NameNoArticle), MethodType.Getter)]
	public static bool GetMockNameNoArticle(PlaceName __instance, ref Lumina.Text.ReadOnly.ReadOnlySeString __result) {
		__result = MockPlaceNameExtensions.GetNameNoArticle(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown0), MethodType.Getter)]
	public static bool GetMockUnknown0(PlaceName __instance, ref Lumina.Text.ReadOnly.ReadOnlySeString __result) {
		__result = MockPlaceNameExtensions.GetUnknown0(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown1), MethodType.Getter)]
	public static bool GetMockUnknown1(PlaceName __instance, ref sbyte __result) {
		__result = MockPlaceNameExtensions.GetUnknown1(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown2), MethodType.Getter)]
	public static bool GetMockUnknown2(PlaceName __instance, ref sbyte __result) {
		__result = MockPlaceNameExtensions.GetUnknown2(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown3), MethodType.Getter)]
	public static bool GetMockUnknown3(PlaceName __instance, ref sbyte __result) {
		__result = MockPlaceNameExtensions.GetUnknown3(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown4), MethodType.Getter)]
	public static bool GetMockUnknown4(PlaceName __instance, ref sbyte __result) {
		__result = MockPlaceNameExtensions.GetUnknown4(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown5), MethodType.Getter)]
	public static bool GetMockUnknown5(PlaceName __instance, ref sbyte __result) {
		__result = MockPlaceNameExtensions.GetUnknown5(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown6), MethodType.Getter)]
	public static bool GetMockUnknown6(PlaceName __instance, ref sbyte __result) {
		__result = MockPlaceNameExtensions.GetUnknown6(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown7), MethodType.Getter)]
	public static bool GetMockUnknown7(PlaceName __instance, ref ushort __result) {
		__result = MockPlaceNameExtensions.GetUnknown7(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown8), MethodType.Getter)]
	public static bool GetMockUnknown8(PlaceName __instance, ref byte __result) {
		__result = MockPlaceNameExtensions.GetUnknown8(__instance);
		return false;
	}

	[HarmonyPrefix]
	[HarmonyPatch(nameof(PlaceName.Unknown9), MethodType.Getter)]
	public static bool GetMockUnknown9(PlaceName __instance, ref byte __result) {
		__result = MockPlaceNameExtensions.GetUnknown9(__instance);
		return false;
	}
}

[HarmonyPatch]
public static class PlaceNameExcelSheetExtensions {
	private static readonly StaticInstanceField<List<PlaceName>> RegisteredRows = new();
	
	public static List<PlaceName> GetMockRows(this ExcelSheet<PlaceName> sheet) {
		return RegisteredRows.GetOrDefault(sheet, new List<PlaceName>());
	}
	
	public static void AddMockRows(
		this ExcelSheet<PlaceName> sheet,
		params PlaceName[] rows
	) {
		GetMockRows(sheet).AddRange(rows);
	}

	[HarmonyPrefix]
	public static bool GetMockEnumerator(
		ExcelSheet<PlaceName> __instance,
		ref IEnumerator __result
	) {
		IEnumerable<PlaceName> rows = GetMockRows(__instance);
		__result = (IEnumerator)rows.GetEnumerator();
		return false;
	}

	[HarmonyTargetMethods]
	public static IEnumerable<MethodBase> EnumeratorMethods() {
		return [
			InterfaceImpl<ExcelSheet<PlaceName>, IEnumerable>(nameof(IEnumerable.GetEnumerator)),
			InterfaceImpl<ExcelSheet<PlaceName>, IEnumerable<PlaceName>>(
				nameof(IEnumerable<PlaceName>.GetEnumerator)
			),
		];
	}

	private static MethodInfo InterfaceImpl<Impl, Interface>(string methodName) {
		var map = typeof(Impl).GetInterfaceMap(typeof(Interface));
		return map
			.InterfaceMethods
			.Select((method, i) => (method, i))
			.Where(m => m.method.Name == methodName)
			.Select(m => map.TargetMethods[m.i])
			.First();
	}
}
